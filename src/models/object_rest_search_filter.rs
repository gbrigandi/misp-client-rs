//!
//! MISP Automation API
//!
//!  ### Getting Started  MISP API allows you to query, create, modify data models, such as [Events](https://www.circl.lu/doc/misp/GLOSSARY.html#misp-event), [Objects](https://www.circl.lu/doc/misp/misp-objects/), [Attributes](https://www.circl.lu/doc/misp/GLOSSARY.html#misp-attribute). This is extremly useful for interconnecting MISP with external tools and feeding other systems with threat intel data.  It also lets you perform administrative tasks such as creating users, organisations, altering MISP settings, and much more.  To get an API key there are several options: * **[UI]** Go to [My Profile -> Auth Keys](/auth_keys/index) section and click on `+ Add authentication key`  * **[UI]** As an admin go to the the [Administration -> List Users -> View](/admin/users/view/[id]) page of the user you want to create an auth key for and on the `Auth keys` section click on `+ Add authentication key`  * **[CLI]** Use the following command: `./app/Console/cake user change_authkey [e-mail/user_id]`  * **API** Provided you already have an admin level API key, you can create an API key for another user using the `[POST]/auth_keys/add/{{user_id}}` endpoint.  > **NOTE:** The authentication key will only be displayed once, so take note of it or store it properly in your application secrets.  #### Accept and Content-Type headers  When performing your request, depending on the type of request, you might need to explicitly specify in what content  type you want to get your results. This is done by setting one of the below `Accept` headers:      Accept: application/json     Accept: application/xml  When submitting data in a `POST`, `PUT` or `DELETE` operation you also need to specify in what content-type you encoded the payload.  This is done by setting one of the below `Content-Type` headers:      Content-Type: application/json     Content-Type: application/xml  Example: ``` curl  --header \"Authorization: YOUR_API_KEY\" \\       --header \"Accept: application/json\" \\       --header \"Content-Type: application/json\" https://<misp url>/  ```  > **NOTE**: By appending .json or .xml the content type can also be set without the need for a header.  #### Automation using PyMISP  [PyMISP](https://github.com/MISP/PyMISP) is a Python library to access MISP platforms via their REST [API](https://www.circl.lu/doc/misp/GLOSSARY.html#api). It allows you to fetch events, add or update events/attributes, add or update samples or search for attributes.  ### FAQ * [Dev FAQ](https://www.circl.lu/doc/misp/dev-faq/) * [GitHub project FAQ](https://github.com/MISP/MISP/wiki/Frequently-Asked-Questions) 
//!
//! The version of the OpenAPI document: 2.4
//! 
//! Generated by: https://openapi-generator.tech
//! 

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ObjectRestSearchFilter {
    #[serde(rename = "page", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page: Option<Option<i32>>,
    #[serde(rename = "limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub limit: Option<Option<i32>>,
    /// Search events by matching any tag names, event descriptions, attribute values or attribute comments
    #[serde(rename = "quickFilter", skip_serializing_if = "Option::is_none")]
    pub quick_filter: Option<String>,
    /// Search events by matching any tag names, event descriptions, attribute values or attribute comments
    #[serde(rename = "searchall", skip_serializing_if = "Option::is_none")]
    pub searchall: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "object_name", skip_serializing_if = "Option::is_none")]
    pub object_name: Option<String>,
    #[serde(rename = "object_template_uuid", skip_serializing_if = "Option::is_none")]
    pub object_template_uuid: Option<uuid::Uuid>,
    #[serde(rename = "object_template_version", skip_serializing_if = "Option::is_none")]
    pub object_template_version: Option<String>,
    #[serde(rename = "eventid", skip_serializing_if = "Option::is_none")]
    pub eventid: Option<String>,
    #[serde(rename = "eventinfo", skip_serializing_if = "Option::is_none")]
    pub eventinfo: Option<String>,
    /// If true matches both true and false values for `to_ids` and `published`
    #[serde(rename = "ignore", skip_serializing_if = "Option::is_none")]
    pub ignore: Option<bool>,
    /// You can use any of the valid time related filters (examples: 7d, timestamps, [14d, 7d] for ranges, etc.)
    #[serde(rename = "from", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from: Option<Option<String>>,
    /// You can use any of the valid time related filters (examples: 7d, timestamps, [14d, 7d] for ranges, etc.)
    #[serde(rename = "to", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to: Option<Option<String>>,
    /// You can use any of the valid time related filters (examples: 7d, timestamps, [14d, 7d] for ranges, etc.)
    #[serde(rename = "date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date: Option<Option<String>>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    #[serde(rename = "last", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last: Option<Option<Box<models::LastRestSearchFilter>>>,
    #[serde(rename = "event_timestamp", skip_serializing_if = "Option::is_none")]
    pub event_timestamp: Option<String>,
    #[serde(rename = "publish_timestamp", skip_serializing_if = "Option::is_none")]
    pub publish_timestamp: Option<String>,
    #[serde(rename = "org", skip_serializing_if = "Option::is_none")]
    pub org: Option<Box<models::RestSearchEventsRequestOrg>>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<uuid::Uuid>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::AttributeType>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<models::AttributeCategory>,
    /// Filter by the attribute object relation value
    #[serde(rename = "object_relation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_relation: Option<Option<String>>,
    #[serde(rename = "attribute_timestamp", skip_serializing_if = "Option::is_none")]
    pub attribute_timestamp: Option<String>,
    #[serde(rename = "first_seen", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_seen: Option<Option<String>>,
    #[serde(rename = "last_seen", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_seen: Option<Option<String>>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "to_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to_ids: Option<Option<bool>>,
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Extends the response with the base64 representation of the attachment, if there is one
    #[serde(rename = "withAttachments", skip_serializing_if = "Option::is_none")]
    pub with_attachments: Option<bool>,
    /// Should the warning list be enforced. Adds blocked field for matching attributes
    #[serde(rename = "enforceWarninglist", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enforce_warninglist: Option<Option<bool>>,
    /// Include also exportable tags
    #[serde(rename = "includeAllTags", skip_serializing_if = "Option::is_none")]
    pub include_all_tags: Option<bool>,
    /// Include matching eventUuids in the response
    #[serde(rename = "include_event_uuid", skip_serializing_if = "Option::is_none")]
    pub include_event_uuid: Option<bool>,
    /// Include tags of matching events in the response
    #[serde(rename = "includeEventTags", skip_serializing_if = "Option::is_none")]
    pub include_event_tags: Option<bool>,
    /// Include proposals of matching events in the response
    #[serde(rename = "includeProposals", skip_serializing_if = "Option::is_none")]
    pub include_proposals: Option<bool>,
    #[serde(rename = "includeWarninglistHits", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_warninglist_hits: Option<Option<bool>>,
    /// Adds events context fields in the CSV export
    #[serde(rename = "includeContext", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_context: Option<Option<bool>>,
    /// Adds events context fields in the CSV export
    #[serde(rename = "includeSightings", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_sightings: Option<Option<bool>>,
    /// Extend response with Sightings DB results if the module is enabled
    #[serde(rename = "includeSightingdb", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_sightingdb: Option<Option<bool>>,
    #[serde(rename = "includeCorrelations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_correlations: Option<Option<bool>>,
    /// Include all enabled decaying score
    #[serde(rename = "includeDecayScore", skip_serializing_if = "Option::is_none")]
    pub include_decay_score: Option<bool>,
    /// Include all model information of matching events in the response
    #[serde(rename = "includeFullModel", skip_serializing_if = "Option::is_none")]
    pub include_full_model: Option<bool>,
    /// Allow blocking attributes from to_ids sensitive exports if a proposal has been made to it to remove the IDS flag
    #[serde(rename = "allow_proposal_blocking", skip_serializing_if = "Option::is_none")]
    pub allow_proposal_blocking: Option<bool>,
    /// Will only return the metadata of the given query scope, contained data is omitted.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<bool>>,
    #[serde(rename = "attackGalaxy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attack_galaxy: Option<Option<String>>,
    /// Should the decayed elements by excluded
    #[serde(rename = "excludeDecayed", skip_serializing_if = "Option::is_none")]
    pub exclude_decayed: Option<bool>,
    /// Specify the decaying model from which the decaying score should be calculated
    #[serde(rename = "decayingModel", skip_serializing_if = "Option::is_none")]
    pub decaying_model: Option<String>,
    #[serde(rename = "modelOverrides", skip_serializing_if = "Option::is_none")]
    pub model_overrides: Option<Box<models::DecayingModelParameters>>,
    /// An alias to override on-the-fly the threshold of the decaying model
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<String>,
    #[serde(rename = "returnFormat", skip_serializing_if = "Option::is_none")]
    pub return_format: Option<models::ObjectsRestSearchReturnFormat>,
}

impl ObjectRestSearchFilter {
    pub fn new() -> ObjectRestSearchFilter {
        ObjectRestSearchFilter {
            page: None,
            limit: None,
            quick_filter: None,
            searchall: None,
            timestamp: None,
            object_name: None,
            object_template_uuid: None,
            object_template_version: None,
            eventid: None,
            eventinfo: None,
            ignore: None,
            from: None,
            to: None,
            date: None,
            tags: None,
            last: None,
            event_timestamp: None,
            publish_timestamp: None,
            org: None,
            uuid: None,
            value: None,
            r#type: None,
            category: None,
            object_relation: None,
            attribute_timestamp: None,
            first_seen: None,
            last_seen: None,
            comment: None,
            to_ids: None,
            published: None,
            deleted: None,
            with_attachments: None,
            enforce_warninglist: None,
            include_all_tags: None,
            include_event_uuid: None,
            include_event_tags: None,
            include_proposals: None,
            include_warninglist_hits: None,
            include_context: None,
            include_sightings: None,
            include_sightingdb: None,
            include_correlations: None,
            include_decay_score: None,
            include_full_model: None,
            allow_proposal_blocking: None,
            metadata: None,
            attack_galaxy: None,
            exclude_decayed: None,
            decaying_model: None,
            model_overrides: None,
            score: None,
            return_format: None,
        }
    }
}

